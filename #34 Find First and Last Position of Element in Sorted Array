class Solution {
// by using binary search;
private:
int lower(vector<int>& nums, int target){
    int first = -1;
    int low =0;
    int high = nums.size()-1;
    int mid =0;
    while(low <= high ){
        mid = low + (high - low)/2;
        if(nums[mid] == target ){
            first = mid;
            high = mid -1;
        }
        else if(target < nums[mid]){
            high = mid -1;
        }
        else{
            low = mid + 1;
        }
    }
    return first;
}

int upper(vector<int>& nums, int target){
    int last = -1;
    int low =0;
    int high = nums.size()-1;
    int mid =0;
    while(low <= high ){
        mid = low + (high - low)/2;
        if(nums[mid] == target ){
            last = mid;
            low = mid + 1;
        }
        else if(target < nums[mid]){
            high = mid -1;
        }
        else{
            low = mid + 1;
        }
    }
    return last;
}

public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int first = -1;
        int last = -1;
        first = lower(nums,target);
        last = uppder(nums,target);

        if(first == -1){
            return {-1,-1};
        }

        return {first, last};
    }
};
